<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.trip.review.mapper.ReviewMapper">
    <resultMap id="ReviewResultMap" type="ReviewResponseDto">
        <id property="reviewNo" column="review_no"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="userName" column="user_name"/>
        <result property="writeAt" column="write_at"/>
        <result property="score" column="score"/>
        <result property="spotId" column="spot_id"/>
        <result property="likeCount" column="like_count"/>
        <result property="spotTitle" column="spot_title"/>
        <result property="spotAddr1" column="spot_addr1"/>

        <collection property="photoUrls" ofType="string" javaType="java.util.ArrayList">
            <result column="photo_url"/>
        </collection>
    </resultMap>

    <select id="listUserReview" resultMap="ReviewResultMap">
        SELECT r.review_no, r.title, r.content, r.user_id,
               r.write_at, r.score, r.spot_id,
               s.title AS spot_title, s.addr1 AS spot_addr1,
               COUNT(DISTINCT rl.id) as like_count,
               rp.photo_url
        FROM trip.review r
                 JOIN spot s ON r.spot_id = s.spot_id
                 LEFT JOIN reviewlikes rl ON r.review_no = rl.review_no
                 LEFT JOIN reviewphotos rp ON r.review_no = rp.review_no
        WHERE r.user_id = #{userId}
        GROUP BY r.review_no, rp.photo_url
        ORDER BY r.write_at DESC
    </select>
    <select id="listSpotReview" resultType="ReviewDto">
        SELECT review_no as reviewNo,user_id as userId, spot_id as spotId, content, score, write_at as writeAt
        from trip.review
        where spot_id={spotId}
    </select>

    <insert id="writeReview" parameterType="ReviewWriteDto" useGeneratedKeys="true" keyProperty="reviewNo">
        INSERT INTO trip.review (user_id, spot_id, title, content, score, write_at)
        VALUES (#{userId}, #{spotId}, #{title}, #{content}, #{score}, now())
    </insert>


    <update id="modifyReview" parameterType="ReviewUpdateDto">
        UPDATE trip.review
        SET content = #{content}, score = #{score}, title = #{title}
        WHERE user_id = #{userId} AND review_no = #{reviewNo}
    </update>

    <delete id="deleteReview" parameterType="ReviewDeleteDto">
        DELETE FROM trip.review
        WHERE user_id = #{userId} AND review_no = #{reviewNo}
    </delete>

    <delete id="deleteReviewPhoto">
        DELETE FROM reviewphotos
        WHERE review_no = #{reviewNo} AND photo_url = #{photoUrl}
    </delete>

    <insert id="insertReviewPhoto">
        INSERT INTO reviewphotos (review_no, photo_url)
        VALUES (#{reviewNo}, #{photoUrl})
    </insert>

<!--    <select id="searchReviews" resultType="ReviewResponseDto">-->
<!--        SELECT r.review_no as reviewNo-->
<!--        , r.title as title-->
<!--        , r.content as content-->
<!--        , u.user_name as userName-->
<!--        , r.write_at as writeAt-->
<!--        , r.score as score-->
<!--        , s.spot_id as spotId-->
<!--        , (CASE-->
<!--        <choose>-->
<!--            <when test="searchType == 'title' or searchType == 'all'">-->
<!--                WHEN MATCH(r.title) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +')) IN BOOLEAN MODE) THEN 6-->
<!--            </when>-->
<!--        </choose>-->
<!--        <choose>-->
<!--            <when test="searchType == 'content' or searchType == 'all'">-->
<!--                WHEN MATCH(r.content) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +')) IN BOOLEAN MODE) THEN 6-->
<!--            </when>-->
<!--        </choose>-->
<!--        WHEN MATCH(s.title, s.addr1) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +')) IN BOOLEAN MODE) THEN 1-->
<!--        END) AS relevance-->
<!--        FROM review r-->
<!--        JOIN users u ON r.user_id = u.user_id-->
<!--        JOIN spot s ON r.spot_id = s.spot_id-->
<!--        WHERE-->
<!--        <choose>-->
<!--            <when test="searchType == 'title'">-->
<!--                MATCH(r.title) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +'), '*') IN BOOLEAN MODE)-->
<!--            </when>-->
<!--            <when test="searchType == 'content'">-->
<!--                MATCH(r.content) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +'), '*') IN BOOLEAN MODE)-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                MATCH(r.title, r.content) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +'), '*') IN BOOLEAN MODE)-->
<!--                OR MATCH(s.title, s.addr1) AGAINST(CONCAT('+', REPLACE(#{keyword}, ' ', ' +'), '*') IN BOOLEAN MODE)-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--        ORDER BY relevance DESC, r.write_at DESC-->
<!--        LIMIT #{offset}, #{size}-->
<!--    </select>-->

    <select id="getReviews" resultMap="ReviewResultMap">
        SELECT r.review_no, r.title, r.content, u.user_name, r.write_at, r.score, r.spot_id,
        s.title AS spot_title, s.addr1 AS spot_addr1,
        COUNT(DISTINCT rl.id) as like_count,
        rp.photo_url
        FROM review r
        JOIN users u ON r.user_id = u.user_id
        JOIN spot s ON r.spot_id = s.spot_id
        LEFT JOIN reviewlikes rl ON r.review_no = rl.review_no
        LEFT JOIN reviewphotos rp ON r.review_no = rp.review_no
        GROUP BY r.review_no, rp.id
        ORDER BY
        <choose>
            <when test="sortBy == 'likes'">
                like_count DESC
            </when>
            <otherwise>
                r.write_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{size}
    </select>

    <select id="searchReviews" resultMap="ReviewResultMap">
        SELECT r.review_no, r.title, r.content, u.user_name, r.write_at, r.score, r.spot_id,
        COUNT(DISTINCT rl.id) as like_count,
        rp.photo_url,
        (CASE
        <choose>
            <when test="searchType == 'title' or searchType == 'all'">
                WHEN MATCH(r.title) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE) THEN 6
            </when>
        </choose>
        <choose>
            <when test="searchType == 'content' or searchType == 'all'">
                WHEN MATCH(r.content) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE) THEN 6
            </when>
        </choose>
        WHEN MATCH(s.title, s.addr1) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE) THEN 1
        END) AS relevance

        FROM review r
        JOIN users u ON r.user_id = u.user_id
        JOIN spot s ON r.spot_id = s.spot_id
        LEFT JOIN reviewlikes rl ON r.review_no = rl.review_no
        LEFT JOIN reviewphotos rp ON r.review_no = rp.review_no

        WHERE
        <choose>
            <when test="searchType == 'title'">
                MATCH(r.title) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE)
            </when>
            <when test="searchType == 'content'">
                MATCH(r.content) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE)
            </when>
            <otherwise>
                MATCH(r.title, r.content) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE)
                OR MATCH(s.title, s.addr1) AGAINST(#{keyword} IN NATURAL LANGUAGE MODE)
            </otherwise>
        </choose>

        GROUP BY r.review_no, rp.id

        ORDER BY relevance DESC, r.write_at DESC

        LIMIT #{offset}, #{size}
    </select>

<!--    <select id="getReviews" resultType="ReviewResponseDto">-->
<!--        SELECT r.review_no as reviewNo-->
<!--        , r.title as title-->
<!--        , r.content as content-->
<!--        , u.user_name as userName-->
<!--        , r.write_at as writeAt-->
<!--        , r.score as score-->
<!--        , s.spot_id as spotId-->
<!--        , COUNT(rl.id) as likeCount-->

<!--        FROM review r-->

<!--        JOIN users u ON r.user_id = u.user_id-->
<!--        JOIN spot s ON r.spot_id = s.spot_id-->
<!--        LEFT JOIN reviewlikes rl ON r.review_no = rl.review_no-->

<!--        GROUP BY r.review_no-->
<!--        ORDER BY-->
<!--        <choose>-->
<!--            <when test="sortBy == 'likes'">-->
<!--                likeCount DESC-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                r.write_at DESC-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--        LIMIT #{offset}, #{size}-->
<!--    </select>-->
    <select id="getLikeStatus" resultType="ReviewLikeDto">
        SELECT
            r.review_no as reviewNo,
            #{userId} as userId,
            COUNT(rl.id) as likeCount,
            CASE WHEN EXISTS (
                SELECT 1 FROM reviewlikes
                WHERE review_no = r.review_no AND user_id = #{userId}
            ) THEN 1 ELSE 0 END as isLiked
        FROM review r
                 LEFT JOIN reviewlikes rl ON r.review_no = rl.review_no
        WHERE r.review_no = #{reviewNo}
        GROUP BY r.review_no
    </select>

    <insert id="insertLike">
        INSERT INTO reviewlikes (review_no, user_id, created_at)
        VALUES (#{reviewNo}, #{userId}, NOW())
    </insert>

    <delete id="deleteLike">
        DELETE FROM reviewlikes
        WHERE review_no = #{reviewNo} AND user_id = #{userId}
    </delete>

    <select id="getLikeCount" resultType="int">
        SELECT COUNT(*) FROM reviewlikes WHERE review_no = #{reviewNo}
    </select>

</mapper>